name: Build and deploy

env:
  DOCKERHUB_USERNAME: nellshark
  DOCKER_IMAGE_VERSION: ${{ github.run_id }}

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  build-spring-boot:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: oracle
          cache: gradle

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./backend/gradlew

      - name: Gradle clean build
        working-directory: ./backend
        run: ./gradlew clean build --no-daemon

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-backend:${{ env.DOCKER_IMAGE_VERSION }}
          context: ./backend
          file: ./backend/Dockerfile

  build-react:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-frontend:${{ env.DOCKER_IMAGE_VERSION }}
          context: ./frontend
          file: ./frontend/Dockerfile

  deploy:
    runs-on: ubuntu-latest
    needs: [build-spring-boot, build-react]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Apply files to k8s
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: apply -f ./k8s
        
      - name: Set new frontend image in k8s
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: set image deployment frontend-deployment frontend=${{ env.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-frontend:${{ env.DOCKER_IMAGE_VERSION }}

      - name: Set new backend image in k8s
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: set image deployment backend-deployment backend=${{ env.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-backend:${{ env.DOCKER_IMAGE_VERSION }}
            
      - name: Sleep for 1 minute
        run: sleep 60

      - name: Check URL
        run: |
          if [[ $(curl -s -o /dev/null -w "%{http_code}" https://mock-api-hub.ru/api/v1/addresses) == "200" ]]
          then
            echo "URL is accessible."
          else
            echo "URL is not accessible."
            exit 1
          fi
